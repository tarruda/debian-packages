cl: Apply apple-smc fix to allow sierra guests. More details: https://www.contrib.andrew.cmu.edu/~somlo/OSXKVM/
diff --git a/debian/patches/series b/debian/patches/series
index 5143af1..eb9b6bf 100644
--- a/debian/patches/series
+++ b/debian/patches/series
@@ -48,3 +48,6 @@ ide-do-not-flush-empty-CDROM-drives-CVE-2017-12809.patch
 vga-stop-passing-pointers-to-vga_draw_line-functions-CVE-2017-13672.patch
 multiboot-validate-multiboot-header-address-values-CVE-2017-14167.patch
 slirp-fix-clearing-ifq_so-from-pending-packets-CVE-2017-13711.patch
+v1-1-3-applesmc-cosmetic-whitespace-and-indentation-cleanup.diff
+v1-2-3-applesmc-consolidate-port-i-o-into-single-contiguous-region.diff
+v1-3-3-applesmc-implement-error-status-port.diff
diff --git a/debian/patches/v1-1-3-applesmc-cosmetic-whitespace-and-indentation-cleanup.diff b/debian/patches/v1-1-3-applesmc-cosmetic-whitespace-and-indentation-cleanup.diff
new file mode 100644
index 0000000..6a66bcd
--- /dev/null
+++ b/debian/patches/v1-1-3-applesmc-cosmetic-whitespace-and-indentation-cleanup.diff
@@ -0,0 +1,159 @@
+diff --git a/hw/misc/applesmc.c b/hw/misc/applesmc.c
+index 77fab5b..986f2ac 100644
+--- a/hw/misc/applesmc.c
++++ b/hw/misc/applesmc.c
+@@ -39,24 +39,27 @@
+ /* #define DEBUG_SMC */
+ 
+ #define APPLESMC_DEFAULT_IOBASE        0x300
+-/* data port used by Apple SMC */
+-#define APPLESMC_DATA_PORT             0x0
+-/* command/status port used by Apple SMC */
+-#define APPLESMC_CMD_PORT              0x4
+-#define APPLESMC_NR_PORTS              32
+ 
+-#define APPLESMC_READ_CMD              0x10
+-#define APPLESMC_WRITE_CMD             0x11
+-#define APPLESMC_GET_KEY_BY_INDEX_CMD  0x12
+-#define APPLESMC_GET_KEY_TYPE_CMD      0x13
++enum {
++    APPLESMC_DATA_PORT               = 0x00,
++    APPLESMC_CMD_PORT                = 0x04,
++    APPLESMC_NUM_PORTS               = 0x20,
++};
++
++enum {
++    APPLESMC_READ_CMD                = 0x10,
++    APPLESMC_WRITE_CMD               = 0x11,
++    APPLESMC_GET_KEY_BY_INDEX_CMD    = 0x12,
++    APPLESMC_GET_KEY_TYPE_CMD        = 0x13,
++};
+ 
+ #ifdef DEBUG_SMC
+ #define smc_debug(...) fprintf(stderr, "AppleSMC: " __VA_ARGS__)
+ #else
+-#define smc_debug(...) do { } while(0)
++#define smc_debug(...) do { } while (0)
+ #endif
+ 
+-static char default_osk[64] = "This is a dummy key. Enter the real key "
++static char default_osk[65] = "This is a dummy key. Enter the real key "
+                               "using the -osk parameter";
+ 
+ struct AppleSMCData {
+@@ -77,12 +80,11 @@ struct AppleSMCState {
+     uint32_t iobase;
+     uint8_t cmd;
+     uint8_t status;
+-    uint8_t key[4];
++    char key[4];
+     uint8_t read_pos;
+     uint8_t data_len;
+     uint8_t data_pos;
+     uint8_t data[255];
+-    uint8_t charactic[4];
+     char *osk;
+     QLIST_HEAD(, AppleSMCData) data_def;
+ };
+@@ -93,10 +95,10 @@ static void applesmc_io_cmd_write(void *opaque, hwaddr addr, uint64_t val,
+     AppleSMCState *s = opaque;
+ 
+     smc_debug("CMD Write B: %#x = %#x\n", addr, val);
+-    switch(val) {
+-        case APPLESMC_READ_CMD:
+-            s->status = 0x0c;
+-            break;
++    switch (val) {
++    case APPLESMC_READ_CMD:
++        s->status = 0x0c;
++        break;
+     }
+     s->cmd = val;
+     s->read_pos = 0;
+@@ -123,54 +125,54 @@ static void applesmc_io_data_write(void *opaque, hwaddr addr, uint64_t val,
+     AppleSMCState *s = opaque;
+ 
+     smc_debug("DATA Write B: %#x = %#x\n", addr, val);
+-    switch(s->cmd) {
+-        case APPLESMC_READ_CMD:
+-            if(s->read_pos < 4) {
+-                s->key[s->read_pos] = val;
+-                s->status = 0x04;
+-            } else if(s->read_pos == 4) {
+-                s->data_len = val;
+-                s->status = 0x05;
+-                s->data_pos = 0;
+-                smc_debug("Key = %c%c%c%c Len = %d\n", s->key[0],
+-                          s->key[1], s->key[2], s->key[3], val);
+-                applesmc_fill_data(s);
+-            }
+-            s->read_pos++;
+-            break;
++    switch (s->cmd) {
++    case APPLESMC_READ_CMD:
++        if (s->read_pos < 4) {
++            s->key[s->read_pos] = val;
++            s->status = 0x04;
++        } else if (s->read_pos == 4) {
++            s->data_len = val;
++            s->status = 0x05;
++            s->data_pos = 0;
++            smc_debug("Key = %c%c%c%c Len = %d\n", s->key[0],
++                      s->key[1], s->key[2], s->key[3], val);
++            applesmc_fill_data(s);
++        }
++        s->read_pos++;
++        break;
+     }
+ }
+ 
+-static uint64_t applesmc_io_data_read(void *opaque, hwaddr addr1,
+-                                      unsigned size)
++static uint64_t applesmc_io_data_read(void *opaque, hwaddr addr, unsigned size)
+ {
+     AppleSMCState *s = opaque;
+     uint8_t retval = 0;
+ 
+-    switch(s->cmd) {
+-        case APPLESMC_READ_CMD:
+-            if(s->data_pos < s->data_len) {
+-                retval = s->data[s->data_pos];
+-                smc_debug("READ_DATA[%d] = %#hhx\n", s->data_pos,
+-                          retval);
+-                s->data_pos++;
+-                if(s->data_pos == s->data_len) {
+-                    s->status = 0x00;
+-                    smc_debug("EOF\n");
+-                } else
+-                    s->status = 0x05;
++    switch (s->cmd) {
++    case APPLESMC_READ_CMD:
++        if (s->data_pos < s->data_len) {
++            retval = s->data[s->data_pos];
++            smc_debug("READ_DATA[%d] = %#hhx\n", s->data_pos,
++                      retval);
++            s->data_pos++;
++            if (s->data_pos == s->data_len) {
++                s->status = 0x00;
++                smc_debug("EOF\n");
++            } else {
++                s->status = 0x05;
+             }
++        }
+     }
+-    smc_debug("DATA Read b: %#x = %#x\n", addr1, retval);
++    smc_debug("DATA Read b: %#x = %#x\n", addr, retval);
+ 
+     return retval;
+ }
+ 
+-static uint64_t applesmc_io_cmd_read(void *opaque, hwaddr addr1, unsigned size)
++static uint64_t applesmc_io_cmd_read(void *opaque, hwaddr addr, unsigned size)
+ {
+     AppleSMCState *s = opaque;
+ 
+-    smc_debug("CMD Read B: %#x\n", addr1);
++    smc_debug("CMD Read B: %#x\n", addr);
+     return s->status;
+ }
+ 
diff --git a/debian/patches/v1-2-3-applesmc-consolidate-port-i-o-into-single-contiguous-region.diff b/debian/patches/v1-2-3-applesmc-consolidate-port-i-o-into-single-contiguous-region.diff
new file mode 100644
index 0000000..753d3dc
--- /dev/null
+++ b/debian/patches/v1-2-3-applesmc-consolidate-port-i-o-into-single-contiguous-region.diff
@@ -0,0 +1,82 @@
+diff --git a/hw/misc/applesmc.c b/hw/misc/applesmc.c
+index 986f2ac..e581e02 100644
+--- a/hw/misc/applesmc.c
++++ b/hw/misc/applesmc.c
+@@ -75,8 +75,7 @@ typedef struct AppleSMCState AppleSMCState;
+ struct AppleSMCState {
+     ISADevice parent_obj;
+ 
+-    MemoryRegion io_data;
+-    MemoryRegion io_cmd;
++    MemoryRegion io_reg;
+     uint32_t iobase;
+     uint8_t cmd;
+     uint8_t status;
+@@ -207,19 +206,36 @@ static void qdev_applesmc_isa_reset(DeviceState *dev)
+     applesmc_add_key(s, "MSSD", 1, "\0x3");
+ }
+ 
+-static const MemoryRegionOps applesmc_data_io_ops = {
+-    .write = applesmc_io_data_write,
+-    .read = applesmc_io_data_read,
+-    .endianness = DEVICE_NATIVE_ENDIAN,
+-    .impl = {
+-        .min_access_size = 1,
+-        .max_access_size = 1,
+-    },
+-};
++static void applesmc_io_write(void *opaque, hwaddr addr, uint64_t val,
++                              unsigned size)
++{
++    switch (addr) {
++    case APPLESMC_DATA_PORT:
++        applesmc_io_data_write(opaque, addr, val, size);
++        break;
++    case APPLESMC_CMD_PORT:
++        applesmc_io_cmd_write(opaque, addr, val, size);
++        break;
++    default:
++        break;
++    }
++}
+ 
+-static const MemoryRegionOps applesmc_cmd_io_ops = {
+-    .write = applesmc_io_cmd_write,
+-    .read = applesmc_io_cmd_read,
++static uint64_t applesmc_io_read(void *opaque, hwaddr addr, unsigned size)
++{
++    switch (addr) {
++    case APPLESMC_DATA_PORT:
++        return applesmc_io_data_read(opaque, addr, size);
++    case APPLESMC_CMD_PORT:
++        return applesmc_io_cmd_read(opaque, addr, size);
++    default:
++        return 0xff;
++    }
++}
++
++static const MemoryRegionOps applesmc_io_ops = {
++    .write = applesmc_io_write,
++    .read = applesmc_io_read,
+     .endianness = DEVICE_NATIVE_ENDIAN,
+     .impl = {
+         .min_access_size = 1,
+@@ -231,15 +247,9 @@ static void applesmc_isa_realize(DeviceState *dev, Error **errp)
+ {
+     AppleSMCState *s = APPLE_SMC(dev);
+ 
+-    memory_region_init_io(&s->io_data, OBJECT(s), &applesmc_data_io_ops, s,
+-                          "applesmc-data", 4);
+-    isa_register_ioport(&s->parent_obj, &s->io_data,
+-                        s->iobase + APPLESMC_DATA_PORT);
+-
+-    memory_region_init_io(&s->io_cmd, OBJECT(s), &applesmc_cmd_io_ops, s,
+-                          "applesmc-cmd", 4);
+-    isa_register_ioport(&s->parent_obj, &s->io_cmd,
+-                        s->iobase + APPLESMC_CMD_PORT);
++    memory_region_init_io(&s->io_reg, OBJECT(s), &applesmc_io_ops, s,
++                          "applesmc", APPLESMC_NUM_PORTS);
++    isa_register_ioport(&s->parent_obj, &s->io_reg, s->iobase);
+ 
+     if (!s->osk || (strlen(s->osk) != 64)) {
+         fprintf(stderr, "WARNING: Using AppleSMC with invalid key\n");
diff --git a/debian/patches/v1-3-3-applesmc-implement-error-status-port.diff b/debian/patches/v1-3-3-applesmc-implement-error-status-port.diff
new file mode 100644
index 0000000..25b83d3
--- /dev/null
+++ b/debian/patches/v1-3-3-applesmc-implement-error-status-port.diff
@@ -0,0 +1,220 @@
+diff --git a/hw/misc/applesmc.c b/hw/misc/applesmc.c
+index e581e02..eac0659 100644
+--- a/hw/misc/applesmc.c
++++ b/hw/misc/applesmc.c
+@@ -43,6 +43,7 @@
+ enum {
+     APPLESMC_DATA_PORT               = 0x00,
+     APPLESMC_CMD_PORT                = 0x04,
++    APPLESMC_ERR_PORT                = 0x1e,
+     APPLESMC_NUM_PORTS               = 0x20,
+ };
+ 
+@@ -53,6 +54,24 @@ enum {
+     APPLESMC_GET_KEY_TYPE_CMD        = 0x13,
+ };
+ 
++enum {
++    APPLESMC_ST_CMD_DONE             = 0x00,
++    APPLESMC_ST_DATA_READY           = 0x01,
++    APPLESMC_ST_BUSY                 = 0x02,
++    APPLESMC_ST_ACK                  = 0x04,
++    APPLESMC_ST_NEW_CMD              = 0x08,
++};
++
++enum {
++    APPLESMC_ST_1E_CMD_INTRUPTED     = 0x80,
++    APPLESMC_ST_1E_STILL_BAD_CMD     = 0x81,
++    APPLESMC_ST_1E_BAD_CMD           = 0x82,
++    APPLESMC_ST_1E_NOEXIST           = 0x84,
++    APPLESMC_ST_1E_WRITEONLY         = 0x85,
++    APPLESMC_ST_1E_READONLY          = 0x86,
++    APPLESMC_ST_1E_BAD_INDEX         = 0xb8,
++};
++
+ #ifdef DEBUG_SMC
+ #define smc_debug(...) fprintf(stderr, "AppleSMC: " __VA_ARGS__)
+ #else
+@@ -79,6 +98,8 @@ struct AppleSMCState {
+     uint32_t iobase;
+     uint8_t cmd;
+     uint8_t status;
++    uint8_t status_1e;
++    uint8_t last_ret;
+     char key[4];
+     uint8_t read_pos;
+     uint8_t data_len;
+@@ -92,79 +113,112 @@ static void applesmc_io_cmd_write(void *opaque, hwaddr addr, uint64_t val,
+                                   unsigned size)
+ {
+     AppleSMCState *s = opaque;
++    uint8_t status = s->status & 0x0f;
+ 
+-    smc_debug("CMD Write B: %#x = %#x\n", addr, val);
++    smc_debug("CMD received: 0x%02x\n", (uint8_t)val);
+     switch (val) {
+     case APPLESMC_READ_CMD:
+-        s->status = 0x0c;
++        /* did last command run through OK? */
++        if (status == APPLESMC_ST_CMD_DONE || status == APPLESMC_ST_NEW_CMD) {
++            s->cmd = val;
++            s->status = APPLESMC_ST_NEW_CMD | APPLESMC_ST_ACK;
++        } else {
++            smc_debug("ERROR: previous command interrupted!\n");
++            s->status = APPLESMC_ST_NEW_CMD;
++            s->status_1e = APPLESMC_ST_1E_CMD_INTRUPTED;
++        }
+         break;
++    default:
++        smc_debug("UNEXPECTED CMD 0x%02x\n", (uint8_t)val);
++        s->status = APPLESMC_ST_NEW_CMD;
++        s->status_1e = APPLESMC_ST_1E_BAD_CMD;
+     }
+-    s->cmd = val;
+     s->read_pos = 0;
+     s->data_pos = 0;
+ }
+ 
+-static void applesmc_fill_data(AppleSMCState *s)
++static struct AppleSMCData *applesmc_find_key(AppleSMCState *s, const char *key)
+ {
+     struct AppleSMCData *d;
+ 
+     QLIST_FOREACH(d, &s->data_def, node) {
+-        if (!memcmp(d->key, s->key, 4)) {
+-            smc_debug("Key matched (%s Len=%d Data=%s)\n", d->key,
+-                      d->len, d->data);
+-            memcpy(s->data, d->data, d->len);
+-            return;
++        if (!memcmp(d->key, key, 4)) {
++            return d;
+         }
+     }
++    return NULL;
+ }
+ 
+ static void applesmc_io_data_write(void *opaque, hwaddr addr, uint64_t val,
+                                    unsigned size)
+ {
+     AppleSMCState *s = opaque;
++    struct AppleSMCData *d;
+ 
+-    smc_debug("DATA Write B: %#x = %#x\n", addr, val);
++    smc_debug("DATA received: 0x%02x\n", (uint8_t)val);
+     switch (s->cmd) {
+     case APPLESMC_READ_CMD:
++        if ((s->status & 0x0f) == APPLESMC_ST_CMD_DONE) {
++            break;
++        }
+         if (s->read_pos < 4) {
+             s->key[s->read_pos] = val;
+-            s->status = 0x04;
++            s->status = APPLESMC_ST_ACK;
+         } else if (s->read_pos == 4) {
+-            s->data_len = val;
+-            s->status = 0x05;
+-            s->data_pos = 0;
+-            smc_debug("Key = %c%c%c%c Len = %d\n", s->key[0],
+-                      s->key[1], s->key[2], s->key[3], val);
+-            applesmc_fill_data(s);
++            d = applesmc_find_key(s, s->key);
++            if (d != NULL) {
++                memcpy(s->data, d->data, d->len);
++                s->data_len = d->len;
++                s->data_pos = 0;
++                s->status = APPLESMC_ST_ACK | APPLESMC_ST_DATA_READY;
++                s->status_1e = APPLESMC_ST_CMD_DONE;  /* clear on valid key */
++            } else {
++                smc_debug("READ_CMD: key '%c%c%c%c' not found!\n",
++                          s->key[0], s->key[1], s->key[2], s->key[3]);
++                s->status = APPLESMC_ST_CMD_DONE;
++                s->status_1e = APPLESMC_ST_1E_NOEXIST;
++            }
+         }
+         s->read_pos++;
+         break;
++    default:
++        s->status = APPLESMC_ST_CMD_DONE;
++        s->status_1e = APPLESMC_ST_1E_STILL_BAD_CMD;
+     }
+ }
+ 
+ static uint64_t applesmc_io_data_read(void *opaque, hwaddr addr, unsigned size)
+ {
+     AppleSMCState *s = opaque;
+-    uint8_t retval = 0;
+ 
+     switch (s->cmd) {
+     case APPLESMC_READ_CMD:
++        if (!(s->status & APPLESMC_ST_DATA_READY)) {
++            break;
++        }
+         if (s->data_pos < s->data_len) {
+-            retval = s->data[s->data_pos];
+-            smc_debug("READ_DATA[%d] = %#hhx\n", s->data_pos,
+-                      retval);
++            s->last_ret = s->data[s->data_pos];
++            smc_debug("READ '%c%c%c%c'[%d] = %0x%02x\n",
++                      s->key[0], s->key[1], s->key[2], s->key[3],
++                      s->data_pos, s->last_ret);
+             s->data_pos++;
+             if (s->data_pos == s->data_len) {
+-                s->status = 0x00;
+-                smc_debug("EOF\n");
++                s->status = APPLESMC_ST_CMD_DONE;
++                smc_debug("READ '%c%c%c%c' Len=%d complete!\n",
++                          s->key[0], s->key[1], s->key[2], s->key[3],
++                          s->data_len);
+             } else {
+-                s->status = 0x05;
++                s->status = APPLESMC_ST_ACK | APPLESMC_ST_DATA_READY;
+             }
+         }
++        break;
++    default:
++        s->status = APPLESMC_ST_CMD_DONE;
++        s->status_1e = APPLESMC_ST_1E_STILL_BAD_CMD;
+     }
+-    smc_debug("DATA Read b: %#x = %#x\n", addr, retval);
++    smc_debug("DATA sent: 0x%02x\n", s->last_ret);
+ 
+-    return retval;
++    return s->last_ret;
+ }
+ 
+ static uint64_t applesmc_io_cmd_read(void *opaque, hwaddr addr, unsigned size)
+@@ -175,6 +229,15 @@ static uint64_t applesmc_io_cmd_read(void *opaque, hwaddr addr, unsigned size)
+     return s->status;
+ }
+ 
++static uint64_t applesmc_io_err_read(void *opaque, hwaddr addr, unsigned size)
++{
++    AppleSMCState *s = opaque;
++
++    /* NOTE: read does not clear the 1e status */
++    smc_debug("ERR_CODE sent: 0x%02x\n", s->status_1e);
++    return s->status_1e;
++}
++
+ static void applesmc_add_key(AppleSMCState *s, const char *key,
+                              int len, const char *data)
+ {
+@@ -197,6 +260,9 @@ static void qdev_applesmc_isa_reset(DeviceState *dev)
+     QLIST_FOREACH_SAFE(d, &s->data_def, node, next) {
+         QLIST_REMOVE(d, node);
+     }
++    s->status = 0x00;
++    s->status_1e = 0x00;
++    s->last_ret = 0x00;
+ 
+     applesmc_add_key(s, "REV ", 6, "\x01\x13\x0f\x00\x00\x03");
+     applesmc_add_key(s, "OSK0", 32, s->osk);
+@@ -228,6 +294,8 @@ static uint64_t applesmc_io_read(void *opaque, hwaddr addr, unsigned size)
+         return applesmc_io_data_read(opaque, addr, size);
+     case APPLESMC_CMD_PORT:
+         return applesmc_io_cmd_read(opaque, addr, size);
++    case APPLESMC_ERR_PORT:
++        return applesmc_io_err_read(opaque, addr, size);
+     default:
+         return 0xff;
+     }
